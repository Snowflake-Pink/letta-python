# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing
import datetime as dt
from ....core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ....types.function_call_message_function_call import FunctionCallMessageFunctionCall
from ....types.function_return_status import FunctionReturnStatus


class MessagesListResponseItem_SystemMessage(UniversalBaseModel):
    message_type: typing.Literal["system_message"] = "system_message"
    id: str
    date: dt.datetime
    message: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_UserMessage(UniversalBaseModel):
    message_type: typing.Literal["user_message"] = "user_message"
    id: str
    date: dt.datetime
    message: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_InternalMonologue(UniversalBaseModel):
    message_type: typing.Literal["internal_monologue"] = "internal_monologue"
    id: str
    date: dt.datetime
    internal_monologue: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_FunctionCall(UniversalBaseModel):
    message_type: typing.Literal["function_call"] = "function_call"
    id: str
    date: dt.datetime
    function_call: FunctionCallMessageFunctionCall

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_FunctionReturn(UniversalBaseModel):
    message_type: typing.Literal["function_return"] = "function_return"
    id: str
    date: dt.datetime
    function_return: str
    status: FunctionReturnStatus
    function_call_id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class MessagesListResponseItem_AssistantMessage(UniversalBaseModel):
    message_type: typing.Literal["assistant_message"] = "assistant_message"
    id: str
    date: dt.datetime
    assistant_message: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


MessagesListResponseItem = typing.Union[
    MessagesListResponseItem_SystemMessage,
    MessagesListResponseItem_UserMessage,
    MessagesListResponseItem_InternalMonologue,
    MessagesListResponseItem_FunctionCall,
    MessagesListResponseItem_FunctionReturn,
    MessagesListResponseItem_AssistantMessage,
]
