# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .block import Block
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Memory(UniversalBaseModel):
    """
    Represents the in-context memory of the agent. This includes both the `Block` objects (labelled by sections), as well as tools to edit the blocks.

    Attributes:
        memory (Dict[str, Block]): Mapping from memory block section to memory block.
    """

    memory: typing.Optional[typing.Dict[str, Block]] = pydantic.Field(default=None)
    """
    Mapping from memory block section to memory block.
    """

    prompt_template: typing.Optional[str] = pydantic.Field(default=None)
    """
    Jinja2 template for compiling memory blocks into a prompt string
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
