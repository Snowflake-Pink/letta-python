# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import datetime as dt
from .memory import Memory
from .base_tool_rule import BaseToolRule
from .agent_type import AgentType
from .llm_config import LlmConfig
from .embedding_config import EmbeddingConfig
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AgentState(UniversalBaseModel):
    """
    Representation of an agent's state. This is the state of the agent at a given time, and is persisted in the DB backend. The state has all the information needed to recreate a persisted agent.

    Parameters:
        id (str): The unique identifier of the agent.
        name (str): The name of the agent (must be unique to the user).
        created_at (datetime): The datetime the agent was created.
        message_ids (List[str]): The ids of the messages in the agent's in-context memory.
        memory (Memory): The in-context memory of the agent.
        tools (List[str]): The tools used by the agent. This includes any memory editing functions specified in `memory`.
        system (str): The system prompt used by the agent.
        llm_config (LLMConfig): The LLM configuration used by the agent.
        embedding_config (EmbeddingConfig): The embedding configuration used by the agent.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the agent.
    """

    metadata: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="metadata_")
    ] = pydantic.Field(default=None)
    """
    The metadata of the agent.
    """

    user_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user id of the agent.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The human-friendly ID of the Agent
    """

    name: str = pydantic.Field()
    """
    The name of the agent.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The datetime the agent was created.
    """

    message_ids: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The ids of the messages in the agent's in-context memory.
    """

    memory: typing.Optional[Memory] = None
    tools: typing.List[str] = pydantic.Field()
    """
    The tools used by the agent.
    """

    tool_rules: typing.Optional[typing.List[BaseToolRule]] = pydantic.Field(default=None)
    """
    The list of tool rules.
    """

    tags: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The tags associated with the agent.
    """

    system: str = pydantic.Field()
    """
    The system prompt used by the agent.
    """

    agent_type: AgentType = pydantic.Field()
    """
    The type of agent.
    """

    llm_config: LlmConfig = pydantic.Field()
    """
    The LLM configuration used by the agent.
    """

    embedding_config: EmbeddingConfig = pydantic.Field()
    """
    The embedding configuration used by the agent.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
