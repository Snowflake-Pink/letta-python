# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .required_action import RequiredAction
from .open_ai_error import OpenAiError
from .letta_schemas_openai_openai_tool_call import LettaSchemasOpenaiOpenaiToolCall
from .open_ai_usage import OpenAiUsage
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class OpenAiRun(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique identifier of the run.
    """

    object: typing.Optional[str] = None
    created_at: int = pydantic.Field()
    """
    The unix timestamp of when the run was created.
    """

    thread_id: str = pydantic.Field()
    """
    The unique identifier of the thread.
    """

    assistant_id: str = pydantic.Field()
    """
    The unique identifier of the assistant.
    """

    status: str = pydantic.Field()
    """
    The status of the run.
    """

    required_action: typing.Optional[RequiredAction] = pydantic.Field(default=None)
    """
    The required action of the run.
    """

    last_error: typing.Optional[OpenAiError] = pydantic.Field(default=None)
    """
    The last error of the run.
    """

    expires_at: int = pydantic.Field()
    """
    The unix timestamp of when the run expires.
    """

    started_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    The unix timestamp of when the run started.
    """

    cancelled_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    The unix timestamp of when the run was cancelled.
    """

    failed_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    The unix timestamp of when the run failed.
    """

    completed_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    The unix timestamp of when the run completed.
    """

    model: str = pydantic.Field()
    """
    The model used by the run.
    """

    instructions: str = pydantic.Field()
    """
    The instructions for the run.
    """

    tools: typing.Optional[typing.List[LettaSchemasOpenaiOpenaiToolCall]] = pydantic.Field(default=None)
    """
    The tools used by the run.
    """

    file_ids: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of file IDs associated with the run.
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Metadata associated with the run.
    """

    usage: typing.Optional[OpenAiUsage] = pydantic.Field(default=None)
    """
    The usage of the run.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
