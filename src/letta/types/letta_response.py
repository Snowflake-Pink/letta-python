# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .letta_response_assistant_message import LettaResponseAssistantMessage
from ..core.serialization import FieldMetadata
from .letta_response_function_call import LettaResponseFunctionCall
from .letta_response_function_call_delta import LettaResponseFunctionCallDelta
from .letta_response_function_call_message import LettaResponseFunctionCallMessage
import pydantic
from .letta_response_function_return import LettaResponseFunctionReturn
from .letta_response_internal_monologue import LettaResponseInternalMonologue
from .letta_response_letta_usage_statistics import LettaResponseLettaUsageStatistics
from .letta_response_system_message import LettaResponseSystemMessage
from .letta_response_user_message import LettaResponseUserMessage
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class LettaResponse(UniversalBaseModel):
    assistant_message: typing_extensions.Annotated[
        typing.Optional[LettaResponseAssistantMessage], FieldMetadata(alias="AssistantMessage")
    ] = None
    function_call: typing_extensions.Annotated[
        typing.Optional[LettaResponseFunctionCall], FieldMetadata(alias="FunctionCall")
    ] = None
    function_call_delta: typing_extensions.Annotated[
        typing.Optional[LettaResponseFunctionCallDelta], FieldMetadata(alias="FunctionCallDelta")
    ] = None
    function_call_message: typing_extensions.Annotated[
        typing.Optional[LettaResponseFunctionCallMessage], FieldMetadata(alias="FunctionCallMessage")
    ] = pydantic.Field(default=None)
    """
    A message representing a request to call a function (generated by the LLM to trigger function execution).
    
    Attributes:
        function_call (Union[FunctionCall, FunctionCallDelta]): The function call
        id (str): The ID of the message
        date (datetime): The date the message was created in ISO format
    """

    function_return: typing_extensions.Annotated[
        typing.Optional[LettaResponseFunctionReturn], FieldMetadata(alias="FunctionReturn")
    ] = pydantic.Field(default=None)
    """
    A message representing the return value of a function call (generated by Letta executing the requested function).
    
    Attributes:
        function_return (str): The return value of the function
        status (Literal["success", "error"]): The status of the function call
        id (str): The ID of the message
        date (datetime): The date the message was created in ISO format
        function_call_id (str): A unique identifier for the function call that generated this message
    """

    internal_monologue: typing_extensions.Annotated[
        typing.Optional[LettaResponseInternalMonologue], FieldMetadata(alias="InternalMonologue")
    ] = pydantic.Field(default=None)
    """
    Representation of an agent's internal monologue.
    
    Attributes:
        internal_monologue (str): The internal monologue of the agent
        id (str): The ID of the message
        date (datetime): The date the message was created in ISO format
    """

    letta_usage_statistics: typing_extensions.Annotated[
        typing.Optional[LettaResponseLettaUsageStatistics], FieldMetadata(alias="LettaUsageStatistics")
    ] = pydantic.Field(default=None)
    """
    Usage statistics for the agent interaction.
    
    Attributes:
        completion_tokens (int): The number of tokens generated by the agent.
        prompt_tokens (int): The number of tokens in the prompt.
        total_tokens (int): The total number of tokens processed by the agent.
        step_count (int): The number of steps taken by the agent.
    """

    system_message: typing_extensions.Annotated[
        typing.Optional[LettaResponseSystemMessage], FieldMetadata(alias="SystemMessage")
    ] = pydantic.Field(default=None)
    """
    A message generated by the system. Never streamed back on a response, only used for cursor pagination.
    
    Attributes:
        message (str): The message sent by the system
        id (str): The ID of the message
        date (datetime): The date the message was created in ISO format
    """

    user_message: typing_extensions.Annotated[
        typing.Optional[LettaResponseUserMessage], FieldMetadata(alias="UserMessage")
    ] = pydantic.Field(default=None)
    """
    A message sent by the user. Never streamed back on a response, only used for cursor pagination.
    
    Attributes:
        message (str): The message sent by the user
        id (str): The ID of the message
        date (datetime): The date the message was created in ISO format
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
