# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .open_ai_run_step_step_defaults import OpenAiRunStepStepDefaults
from .open_ai_error import OpenAiError
from .open_ai_usage import OpenAiUsage
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class OpenAiRunStep(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique identifier of the run step.
    """

    object: typing.Optional[str] = None
    created_at: int = pydantic.Field()
    """
    The unix timestamp of when the run step was created.
    """

    assistant_id: str = pydantic.Field()
    """
    The unique identifier of the assistant.
    """

    thread_id: str = pydantic.Field()
    """
    The unique identifier of the thread.
    """

    run_id: str = pydantic.Field()
    """
    The unique identifier of the run.
    """

    type: str = pydantic.Field()
    """
    The type of the run step.
    """

    status: str = pydantic.Field()
    """
    The status of the run step.
    """

    step_defaults: OpenAiRunStepStepDefaults = pydantic.Field()
    """
    The step defaults.
    """

    last_error: typing.Optional[OpenAiError] = pydantic.Field(default=None)
    """
    The last error of the run step.
    """

    expired_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    The unix timestamp of when the run step expired.
    """

    failed_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    The unix timestamp of when the run failed.
    """

    completed_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    The unix timestamp of when the run completed.
    """

    usage: typing.Optional[OpenAiUsage] = pydantic.Field(default=None)
    """
    The usage of the run.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
